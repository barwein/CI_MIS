% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMR_estimator.R
\name{NMR_estimator}
\alias{NMR_estimator}
\title{Estimation of causal effects with the \code{network-misspecification-robust} estimator}
\usage{
NMR_estimator(
  A.list,
  Z.obs,
  Y.obs,
  Pz_function,
  pz_func_args,
  exposures_vec,
  exposures_contrast,
  exposure_func = generate_exposures_threshold,
  exposure_func_args,
  R = 10^4
)
}
\arguments{
\item{A.list}{List of one or more adjacency matrices (in matrix format)}

\item{Z.obs}{Numeric vector of observed treatments}

\item{Y.obs}{Numeric vector of observed outcomes}

\item{Pz_function}{Function that generate treatment vectors (the experimental design function)}

\item{pz_func_args}{Parameters (as list) required by Pz_function}

\item{exposures_contrast}{List of vectors, where each vector contains two exposure values (as characters)}

\item{exposure_func}{Function that generate exposure values}

\item{exposure_func_args}{Parameters (as list) required by exposure_func}

\item{R}{Number of re-sampling from Pz_function to estimate the exposures probabilities}

\item{exposure_vec}{Vector of characters of the relevant exposure values one wish to estimate the causal effects of}
}
\value{
Estimated causal effects (as data table)
}
\description{
Return the estimated causal effects coupled with conservative variance using HT and Hajek NMR estimators
}
\details{
Estimation of causal effects using a list of networks (represented as adjacency matrices);
The estimator is unbiased if at least one of the networks is correctly specified
}
\examples{
a1 <- as_adjacency_matrix(sample_gnp(1000,0.08))
a2 <- as_adjacency_matrix(sample_gnp(1000,0.05))
Z.obs <- rbinom(1000,1,0.5)
thres <- runif(1000)
expos <- generate_exposures_threshold(A = a1, Z = Z.obs, threshold = thres)
Y.obs <- generate_po(exposures = expos)
exposure_vec <- c("c11","c00","c10","c01")
exposures_contrast <- list(c("c11","c00"), c("c10","c00"))

NMR_estimator(A.list = list(a1,a2),
            Z.obs = Z.obs,
            Y.obs = Y.obs,
            Pz_function = Z_ber,
            pz_func_args = list(n=1000,p=0.5),
            exposures_vec = exposure_vec,
            exposures_contrast = exposures_contrast,
            exposure_func = generate_exposures_threshold,
            exposure_func_args = list(threshold = thres),
             R = 10^4)


}
